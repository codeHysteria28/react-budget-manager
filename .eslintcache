[{"/Users/branislavbuna/Desktop/react-budget-manager/src/index.js":"1","/Users/branislavbuna/Desktop/react-budget-manager/src/components/Dashboard.js":"2","/Users/branislavbuna/Desktop/react-budget-manager/src/components/Login.js":"3","/Users/branislavbuna/Desktop/react-budget-manager/src/components/signUp/Signup.js":"4","/Users/branislavbuna/Desktop/react-budget-manager/src/components/Header.js":"5","/Users/branislavbuna/Desktop/react-budget-manager/src/components/SpendingTableEntries.js":"6","/Users/branislavbuna/Desktop/react-budget-manager/src/components/SpendingEntryModal.js":"7","/Users/branislavbuna/Desktop/react-budget-manager/src/components/Statistics.js":"8","/Users/branislavbuna/Desktop/react-budget-manager/src/components/UserProfile.js":"9"},{"size":890,"mtime":1616063534740,"results":"10","hashOfConfig":"11"},{"size":1823,"mtime":1616060155132,"results":"12","hashOfConfig":"11"},{"size":2456,"mtime":1616060155132,"results":"13","hashOfConfig":"11"},{"size":7343,"mtime":1616066663780,"results":"14","hashOfConfig":"11"},{"size":2252,"mtime":1616063871397,"results":"15","hashOfConfig":"11"},{"size":5464,"mtime":1616062955505,"results":"16","hashOfConfig":"11"},{"size":5105,"mtime":1616061919879,"results":"17","hashOfConfig":"11"},{"size":1107,"mtime":1616060155133,"results":"18","hashOfConfig":"11"},{"size":7963,"mtime":1616068451748,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1m3t0n2",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/branislavbuna/Desktop/react-budget-manager/src/index.js",[],["40","41"],"/Users/branislavbuna/Desktop/react-budget-manager/src/components/Dashboard.js",[],"/Users/branislavbuna/Desktop/react-budget-manager/src/components/Login.js",[],"/Users/branislavbuna/Desktop/react-budget-manager/src/components/signUp/Signup.js",[],"/Users/branislavbuna/Desktop/react-budget-manager/src/components/Header.js",[],"/Users/branislavbuna/Desktop/react-budget-manager/src/components/SpendingTableEntries.js",["42"],"import React, {useState,useEffect} from 'react';\nimport { MDBContainer, MDBDataTable,MDBTabPane, MDBTabContent,MDBNav, MDBNavItem, MDBNavLink} from 'mdbreact';\nimport SpendingEntryModal from \"./SpendingEntryModal\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport './SpendingTableEntries.css';\nimport Statistics from \"./Statistics\";\n\nconst TablePage = (props) => {\n    const [spending,setSpending] = useState(null);\n    const [totalAmount, setTotalAmount] = useState(null);\n    const [activeItem, setActiveItem] = useState(\"1\");\n    const [mostExpItem, setMostExpItem] = useState(null);\n    const [mostExpItemName, setMostExpItemName] = useState(\"\");\n\n    const toggle = tab => {\n        if (activeItem !== tab) {\n            setActiveItem(tab);\n        }\n    };\n\n    const data = {\n        columns: [\n            {\n                label: 'Item',\n                field: 'item',\n                sort: 'asc'\n            },\n            {\n                label: 'Item Category',\n                field: 'category',\n                sort: 'asc'\n            },\n            {\n                label: 'Cost',\n                field: 'price',\n                sort: 'asc'\n            },\n            {\n                label: 'Date',\n                field: 'paid_at',\n                sort: 'asc'\n            }\n\n        ],\n        rows: spending || []\n    }\n\n    const getEntries = () => {\n        axios({\n            method: \"POST\",\n            data: {\n                username: props.user\n            },\n            withCredentials: true,\n            url: \"/spending\",\n        }).then((res) => {\n            if(res.data !== {}){\n                let arr = [];\n                let obj = {};\n                let total_amount_arr = [];\n                res.data.forEach(item => {\n\n                    obj = {\n                        item: item.item,\n                        category: item.category,\n                        price: '€ ' + item.price,\n                        paid_at: item.paid_at\n                    }\n\n                    total_amount_arr.push(Number(item.price));\n                    arr.push(obj);\n                });\n\n                if(arr.length > 0){\n                    // most expensive item so far\n                    const most_exp_item = Math.max(...total_amount_arr);\n                        \n                    // get most expensive item name so far\n                    const getMostExpItemName = arr.filter(mostExpItemName => {\n                        return mostExpItemName.price === '€ ' + most_exp_item;\n                    });\n\n                    // most expensive item name\n                    const mostExpItemName = getMostExpItemName[0].item;\n\n                    // total amount spend\n                    let sum_total_amount = total_amount_arr.reduce((a,b) => {\n                        return a + b;\n                    },0);\n\n                    setTimeout(() => {\n                        setMostExpItem(most_exp_item.toFixed(2));\n                        setTotalAmount(sum_total_amount.toFixed(2));\n                        setMostExpItemName(mostExpItemName);\n                    },1000);\n\n                    setSpending([...arr]);\n                }\n            }else {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Error with getting entries, please try again later.'\n                });\n            }\n        });\n    };\n\n    useEffect(()=> {\n        getEntries();\n    },[]);\n    \n    return (\n        <>\n            <br/><br/>\n            <MDBContainer>\n                <MDBNav className=\"nav-tabs mt-5\">\n                    <MDBNavItem>\n                        <MDBNavLink link to=\"#\" active={activeItem === \"1\"} onClick={() => toggle(\"1\")} role=\"tab\" >\n                            Spending Breakdown\n                        </MDBNavLink>\n                    </MDBNavItem>\n                    <MDBNavItem>\n                        <MDBNavLink link to=\"#\" active={activeItem === \"2\"} onClick={() => toggle(\"2\")} role=\"tab\" >\n                            Income Breakdown\n                        </MDBNavLink>\n                    </MDBNavItem>\n                    <MDBNavItem>\n                        <MDBNavLink link to=\"#\" active={activeItem === \"3\"} onClick={() => toggle(\"3\")} role=\"tab\" >\n                            Statistics\n                        </MDBNavLink>\n                    </MDBNavItem>\n                </MDBNav>\n                <MDBTabContent activeItem={activeItem} >\n                    <MDBTabPane tabId=\"1\" role=\"tabpanel\">\n                        <br/>\n                        <div>\n                            {/* <h1 style={{marginRight: 15, marginTop: 25}}>Spending Breakdown</h1> */}\n                            <SpendingEntryModal user={props.user} entryAdded={getEntries}/>\n                        </div>\n                        <br/>\n                        <MDBDataTable responsive striped bordered small data={data} paging={true} sortable={false} info={true}/>\n                    </MDBTabPane>\n                    <MDBTabPane tabId=\"2\" role=\"tabpanel\">\n                         \n                    </MDBTabPane>\n                    <MDBTabPane tabId=\"3\" role=\"tabpanel\">\n                        <Statistics totalAmount={totalAmount} mostExpItem={mostExpItem} mostExpItemName={mostExpItemName}/> \n                    </MDBTabPane>\n                </MDBTabContent>\n            </MDBContainer>\n        </>\n    );\n};\n\nexport default TablePage;","/Users/branislavbuna/Desktop/react-budget-manager/src/components/SpendingEntryModal.js",[],"/Users/branislavbuna/Desktop/react-budget-manager/src/components/Statistics.js",[],"/Users/branislavbuna/Desktop/react-budget-manager/src/components/UserProfile.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":111,"column":7,"nodeType":"49","endLine":111,"endColumn":9,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEntries'. Either include it or remove the dependency array.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [getEntries]",{"range":"56","text":"57"},[3459,3461],"[getEntries]"]